import { createSlice, type PayloadAction } from '@reduxjs/toolkit';

export type Post = {
  id: string;
  title: string; // до 100 символов
  content: string; // 150–300 символов
};

const initialState: Post[] = [
  {
    id: '1',
    title: 'Как путешествия помогают переосмыслить свою жизнь',
    content:
      'Путешествия позволяют взглянуть на мир иначе, познакомиться с разными культурами и лучше понять себя. Новые впечатления, встреча с незнакомыми людьми и отрыв от повседневной рутины дают возможность переосмыслить приоритеты и вдохновиться на перемены.',
  },
  {
    id: '2',
    title: 'Сила утренних ритуалов и как они влияют на день',
    content:
      'Начало дня имеет огромное значение для нашего настроя и продуктивности. Простые привычки — чашка чая, прогулка, медитация или запись целей — помогают настроиться на позитив, снизить тревожность и прожить день более осознанно и с ощущением контроля над своей жизнью.',
  },
  {
    id: '3',
    title: 'Почему так важно просто гулять на природе',
    content:
      'Прогулки на природе снижают уровень стресса, улучшают концентрацию и укрепляют иммунитет. Контакт с естественной средой — будь то лес, парк или озеро — помогает отдохнуть ментально, восстановить силы и почувствовать связь с окружающим миром, даже в условиях городской суеты.',
  },
  {
    id: '4',
    title: 'Как простая еда может приносить настоящее удовольствие',
    content:
      'Домашняя еда — это не просто способ утолить голод. Это источник тепла, уюта и связи с близкими. Ароматы знакомых блюд могут вызывать воспоминания, поднимать настроение и делать обычный день особенным. Простота в кулинарии — это про внимание и заботу.',
  },
  {
    id: '5',
    title: 'Зачем читать книги, когда вокруг столько информации',
    content:
      'В эпоху соцсетей и быстрого контента книги остаются уникальным способом глубоко погружаться в темы и переживания. Они развивают воображение, учат сопереживать и дают возможность взглянуть на мир с разных сторон. Чтение — это личное, тихое и мощное путешествие.',
  },
];

const postsSlice = createSlice({
  name: 'posts',
  initialState,
  reducers: {
    addPost: (state, action: PayloadAction<Post>) => {
      state.push(action.payload);
    },
    updatePost: (
      state,
      action: PayloadAction<{ postId: string; post: Omit<Post, 'id'> }>,
    ) => {
      const { postId, post } = action.payload;
      const foundPost = state.find((p) => p.id === postId);

      if (foundPost) {
        foundPost.title = post.title;
        foundPost.content = post.content;
      }
    },
  },
});

export const { addPost, updatePost } = postsSlice.actions;

export default postsSlice.reducer;
